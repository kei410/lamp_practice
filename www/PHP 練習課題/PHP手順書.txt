phpを表示するには下記をAWSターミナルに入力する
php -S 0.0.0.0:8000 -t ~/environment/htdocs

phpmyadmin用 下記をAWSターミナルに入力（上記も開いておく）
php -S 0.0.0.0:$PORT -t ~/environment/phpmyadmin

codecamp42398   phpmyadmin用のログイン情報

===========================================
【PHP/MySQL　手順書】
///ECサイト　作成の為の手順書 ///
ECサイトの骨格は次のようなものです。
ほとんどのプログラムが掲示板方式になります。

　
・1. ログイン画面  login.php
　 OK  会員登録画面にジャンプできる機能  
　 OK  admin、adminでログインした場合、商品管理ページにジャンプする
　 OK  すでにログイン済みの場合、会員トップページにジャンプする
　 OK  DBを確認してユーザーが存在してるかチェックする
　 OK  成功時はセッションにuser_idを記録する
　 OK  ログイン成功で、会員トップページにジャンプ
　 OK  失敗すると、エラーメッセージを表示して再度入力
　
　
・2. 会員トップページ top.php
　 OK  ログインされてない場合（セッションにuser_idが存在しない）は、ログイン画面にジャンプする
　 OK  商品の一覧表の作成
　 OK  カートに入れるボタンの処理
　 OK  同一ユーザー、同一商品があればカート数量をカウントアップする
　 OK  なければ、新規カートを追加する
　 OK  ログアウトができる事
　
　
・3. 会員登録画面  
　 OK  ログイン画面にジャンプできる機能
　 OK  ユーザー名、パスワードは半角英数字6文字以上
　
　
・4.ログアウト処理
　 OK  無条件にログイン画面にジャンプ
　

・5. カート一覧ページ
　 OK  ログインされてない場合（セッションにuser_idが存在しない）は、ログイン画面にジャンプする
　 OK  ログインユーザーのカート情報を一覧表示する
　 OK  数量の変更機能、商品の削除機能、合計金額の計算機能
 　OK  購入完了ページへのジャンプ機能
 　OK  ログアウトができる事
　
　
・6. 購入完了ページ
　 OK  ログインされてない場合（セッションにuser_idが存在しない）は、ログイン画面にジャンプする
　 OK  POST形式以外はエラーとする
　 OK  ログインユーザーのカート情報を一覧表示する
　 OK  カートデータ内の商品をチェックする
　 OK  注文数が在庫数より大きい場合はエラー
　 OK  ステータスが公開以外はエラー
　 OK  カートデータが0件の場合はエラー
　　　
　 OK  エラーが無ければトランザクションを開始し、以下の処理を行う
　 OK  カートの数量を使って商品の在庫数を減算する
　 OK  foreachを使って1商品ずつ取り出し、該当する在庫数を減算する
　 OK  ログインしているユーザーのカート情報を削除する
　 OK  ログアウトができる事
　
　
・7. ユーザー管理ページ
　     管理者としてログインされてない場合は、ログイン画面にジャンプする
　 OK  登録済ユーザーの一覧表の表示
　
　
・8. 商品管理ページ    最後につくる
　   管理者としてログインされてない場合は、ログイン画面にジャンプする
　OK 商品の一覧表の表示
　OK 商品の在庫数の変更機能
　OK 商品のステータスの変更機能
　OK 商品の削除機能
　OK 商品の新規登録機能


【　ECサイトの注意点　】
  OK
・カート処理がユーザー単位になっている事
　A会員でログインし、カートに複数の商品を入れておきます。
　その後、B会員でログインした時、カートに商品があってはいけません。
　また、そのままB会員でカートの変更ができてもいけないですし、
　購入完了ページに行ったとき、本来A会員のカートデータですから、B会員が消す事ができてはいけません。
　
　ユーザー単位のカート処理が正しくできてるかどうか、チェックしましょう。
　その後、指定要件を一通りチェックしてみましょう。
　
・ログインチェックは、ログインしてない状態で会員ページに入れないかどうかはチェックしておきましょう。
　また、一度ログインさえしておけば、ログアウトするまでは、ログイン画面が表示されず、
　商品一覧ページが自動的に表示されるかどうかもチェックしましょう。



/// 自動販売機　作成の為の手順書 ///
自動販売機は次のような手順で作るといいと思います。
１．index.php → result.php → tool.phpの順に作成すると分りやすい
２．まずテストデータを作成するためテーブルを作成します。
　　教科書のテストデータを参考に3つのテーブルを作成します。
３．phpMyAdminを使って、テストデータを作成します。
　・各テーブルのメニュー「挿入」を使いますとキー入力でデータを作成することができます。
　・この時、前もってエディタなどで「INSERT」のSQL文を作成し、メニューの「SQL」を使って作成する方法もあります。
４．商品の画像データは前もって複数用意し、エディタに画像専用のフォルダを作成して、アップロードしておきます。


■ index.phpの作成手順
１．まず、教科書のサンプルからHTMLのソースコードを確認し、
　　必要な部分をコピーしてくると作業が早くなります。
２．商品テーブルと在庫テーブルを結合し必要なカラムを取得します。
　・ドリンクID、ドリンク名、価格、画像のファイル名、在庫数
　・この時公開の商品だけが必要です。（非公開は必要ない）
３．在庫数があれば通常のラジオボタン、無ければ「売り切れ」を表示します。
　・HTML側の表示切替は、は教科書のトランザクションサンプルのソースコードを参考になります。

    
■ result.phpの作成手順
・result.phpは20-6 課題を参考にするといいと思�����ます。
　20-6 課題が無い人はトランザクションを参考にしましょう。
１．まず、教科書のサンプルからHTMLのソースコードを確認し、
　　必要な部分をコピーしてくると作業が早くなります。
２．index.phpから飛んでくるデータの取得をし、そのデータのチェックを行います。
　・POST形式でない場合はエラーと判断します。
　・投入金額とIDを取得し、エラーチェックをします
　　文字が入力されてなければエラー、整数以外はエラー
　　整数チェックには「preg_match」を使う
　　この時、「0」を許すか許さないか考える
３．エラーが無ければ、取得したidを使って商品データを取得します。
　・必要な項目はドリンク名、価格、ステータス、画像のファイル名、在庫数
　・該当データが無ければエラー
４．取得した項目を使って次のチェックをします。
　・投入金額から商品単価を引き算しお釣りを算出しておきます。
　・ステータスが公開以外はエラー
　・在庫が無ければエラー
　・お釣りがマイナスの場合はエラー
５．上記までのエラーが無い状態でトランザクション処理を開始し下記の処理を実行します。
　・購入履歴へのデータ記録
　・商品在庫の減算
６．成功メッセージは、トランザクションすべてが完了した時のみ表示しますので、どこかでエラーが発生した時は、成功メッセージは表示しません。
　・result.phpを単体で表示させたとき、変なエラーが出ないようにしましょう。



■ tool.phpの作成要点
１．まず、教科書のサンプルからHTMLのソースコードを確認し、
　　必要な部分をコピーしてくると作業が早くなります。
２．一覧表作成
　・ステータスが1の時とそれ以外で処理が分れる
　　HTML側の表示切替は�����は教科書のトランザクションサンプルのソースコードを参考になります。
　・ステータスが1の時
　　背景色は何もしない
　　ボタンが「公開→非公開」
　　送信データが「0」
　・ステータスが1以外の時
　　背景色は灰色
　　ボタンが「非公開→公開」
　　送信データが「1」
３．formから飛んでくる「sql_kind」を取得して、
　　その文字列に合わせて、下記の処理を切り分ける
４．在庫数変更
　・formから送信されるデータを取得してエラーチェックをする
　　在庫数、drink_id
　　文字が入力されてなければエラー、整数以外はエラー
　　整数チェックには「preg_match」を使う
　　この時、「0」を許すか許さないか考える
　・エラーが無ければ、在庫数を変更する
５．ステータス変更
　・formから送信されるデータを取得してチェックする
　　ステータス、drink_id
　　文字が入力されてなければエラー、整数以外はエラー
　　整数チェックには「preg_match」を使う
　　この時、「0」を許すか許さないか考える
　・エラーが無ければ、ステータスを変更する
６．新規商品登録
　・���ランザクションを使って商品情報と在庫情報を作成する
　　まずは画像のアップロード以外が正しく動作するものを作っておく
　　その後、画像のアップロードをどう組み込むかを考えると解りやすい


■画像のアップロード参考サイト
https://qiita.com/icelandnono/items/b6b3c06124d273f28673
　ページの真ん中よりちょっと上にある
　「まとめ（ソースコード）」の処の2つ目の黒いボックスのPHPが参考になります。



/// 3-6 課題(初級)　作成の為の手順書 ///
printfを学習するには次のサイトが解りやすいと思います。。
・https://kudox.jp/php/printf-sprintf

それ以外のサイト
・https://www.javadrive.jp/phpfunc/string/index7.html
・https://wp.tech-style.info/archives/582
・https://php-beginner.com/sample/counter/counter-format.html
・https://www.sejuku.net/blog/24090



/// 8-19 課題(中級)　作成の為の手順書 ///
8-19 課題(中級)は次の手順で一つずつ丁寧に作ってください。。
１．まず大事なことは一度に全部を作らない。
　細かなことが理解できないのにすべてを一度に作ると何もわからなくなります。
２．まずは、文字列「1*1=1」だけをひとつ画面上に表示させましょう。
　この時for文はまだ使いません。
３．それが表示できたら、9回繰り返すfor文を用意し、その中に上記２．の処理を入れます。
　すると「1*1=1」が横に9個できます。（1の段だけができる）
　この時、文字がすべてくっついてしまうので、半角スペースを1つ入れて隣同士を離します。
４．次に、横に行くにつれ変えないといけない数字があります。
　その数字を変数に変え、自動的に数字が変わるようにします。
　この時、文字と変数の組み合わせが出てくるので、「1-1 変数とは」で習った通り、文字と変数の結合が必要になります。
５．次に2行目を考えますが、このままでは横に並ぶ事になるので、今作った最後に「<br>」の表示を追加しておきます。
　見た目は変わりません。
　ここまでで１の段（9個）がようやく完成します。
６．次に、この「1の段」を9回繰り返すと9の段までが作れるので新しく9回繰り返すfor文を用意します。
　for文ができたら、そのfor文の中に、5までに作った内容をすべて入れます。
　これで同じものが9段できます。
７．次に、縦に行くにつれ変えないといけない数字があります。
　その数字を変数に変え、自動的に数字が変わるようにします。
　この時、文字と変数の組み合わせが出てくるので、「1-1 変数とは」で習った通り、文字と変数の結合が必要になります。

手順通り行えば教科書とほぼ同じような九九表ができるはずです。


/// 9-10 課題　作成の為の手順書 ///
・教科書のfile.phpとfile_sample.phpをきちんと理解しておく事
・今回の課題は「file.php」とほぼ同じ。
　違いは日付項目が増える事
・2項目を同時にファイルに記録する方法は「file_sample.php」を参照
　このサンプルには3項目を一つにまとめ（1行にまとめ）ファイルに書き込む方法を教えてくれている



/// 9-11 課題(中級)　作成の為の手順書 ///
・データを読み込んで一覧表を作る事
・一時的にhtmlspecialcharsを使わない
・ファイルの読み込みはfgetsではなくてfgetcsvを使う事
　fgetcsvの使い方はネット検索して、使い方を学ぶ事
　参考サイト → http://www.php-ref.com/b2api/04_fgetcsv.html
・tableの作り方を理解する事
　「html table」とかで検索すると、いくつもサンプルが出てきます。
　参考サイト → https://www.sejuku.net/blog/49377
・各項目をどのようにすれば表示できるか？
・最後にhtmlspecialcharsをどこに追加すればいいか。



/// 10章ひと���と���示板　���成の為の手順書 ///
10-1 ひとこと掲示板は次のような事に注意して作成するといいと思います。
１．ひとこと掲示板は「ファイル操作の課題(中級)（challenge_file.php）」が参考になります。
　・課題(中級)が綺麗にできてない人は、「ファイル操作（file.php）」と
　　「ファイル操作の使用例（file_sample.php）」を参考に骨格を作成します。
２．入力項目のチェックについては「スーパーグローバルの課題(初級)（challenge_super_global.php）」で使用した手法が参考になります。
３．エラーメッセージはそれ専用の配列変数を用意し、その変数に蓄積していきます。
　・その後、HTML側で「foreach」を使い一覧表示をします。
　　PHP側でprintすることは避けましょう。
４．ファイルの書き込みはエラーがない時のみ実行するようにします。
５．可能ならメッセージの表示は上下反転させ、最新データが一番上に来るようにしましょう。
６．記録メッセージ、エラーメッセージ、どちらもul、liを使って表示すると綺麗に整います。



/// 11章～15章までの課題　作成の為の手順書 ///
11章から15章までで作成するSQL文は��kadai.sql」と言うようなファイルを作成し、
　それぞれのSQL��をすべて残しておきましょう。



/// 正規表現でのチェックの手引き書 ///
・17-4 課題で準備されてるテストデータは正しいものばかりなので、
　本当の意味でのチェックにはなりません。
・課題のソースコードに次のようなものを追加してチェックしてみましょう。
　数か所はＯＫ文字列ですが、それ以外はほとんどエラーにならないといけない文字列ばかりです。
　ネット上には正規表現サンプルが載っていたりしますが、
　下記のエラー文字列が、正しいと判定されるものがあるので注意しましょう。
// 西暦
$check_year[2] = '0000'; //エラー文字列
$check_year[3] = 'id-1234z'; //エラー文字列
$check_year[4] = '-3333'; //エラー文字列
$check_year[5] = '1234567890'; //エラー文字列
$check_year[6] = '単価は2000円'; //エラー文字列
// 電話番号
$check_phone_number[3] = '0120000000'; //エラー文字列
$check_phone_number[4] = '123-456-7890'; //エラー文字列
$check_phone_number[4] = 'id=001-001-0001GG'; //エラー文字列
$check_phone_number[5] = '2020/05/1234'; //エラー文字列
$check_phone_number[6] = '0020-25-a000'; //エラー文字列
// formタグ
$check_form[2] = '<format>'; //エラー文字列
$check_form[3] = '<form'; //エラー文字列
$check_form[4] = '<>form<>'; //エラー文字列
$check_form[5] = '<abc>'; //エラー文字列
// メールアドレス
$check_mail[3] = 'test@test'; //エラー文字列
$check_mail[4] = '@test.com'; //エラー文字列
$check_mail[5] = 'test@'; //エラー文字列
$check_mail[6] = 'testtest.com'; //エラー文字列
$check_mail[7] = 'test@test..com'; //エラー文字列
$check_mail[8] = 'test@test.'; //エラー文字列
$check_mail[9] = 'test@test.##'; //エラー文字列
$check_mail[10] = '##@test.com'; //エラー文字列
$check_mail[11] = 'test#test.com'; //エラー文字列
// URL
$check_url[3] = 'http://test.com/'; //こちらは正しい文字列
$check_url[4] = 'http://test.com/abc'; //こちらは正しい文字列
$check_url[5] = 'http://test.com/abc/'; //こちらは正しい文字列
$check_url[6] = 'http://test/'; //エラー文字列
$check_url[7] = 'https://test..com'; //エラー文字列
$check_url[8] = 'http://test.##'; //エラー文字列



/// 郵便番号辞書検索　作成の為の手順書 ///
17-6 課題(上級)で最低限必要な機能は次のようなものです。
郵便番号辞書検索は次のような手順で作るといいと思います。
■ 郵便番号辞書をDBに作成する
１．郵政省のサイトから取得する方法もあるが、こ��だと文字コードが「SJIS（Shift_JIS）」である。
　→その為、エディタなどを使って、「UTF-8」に変換する必要がある
２．Codecampが用意してくれた「zip_data_split_1.csv」ファイルは「UTF-8」なのでインポートが簡単
３．phpMyAdminを開きご自分のDBを選択する
４．インポートをクリックし、ファイル選択をして実行ボタンを押す
５．作成されたテーブルは、テーブル名、カラム名ともに半角空白が入ってるので誤作動の原因となる
　　テーブル名、カラム名ともに、使いやすい名前に変更する
　　同時に、郵便番号は自動的に「int」型になるが、このま��だ��、頭の「0」が消えて6桁になるので「varchar」型に変える
　　それ以外のカラムも自動的に桁数が決められるが、少し余裕を持たせ、切りのいい桁数に変更し、保存する
６．設定が終われば、phpMyAdminの「操作」をクリックし、「テーブルを空にする（truncate）」を実行して、一度データを消去後、再度インポートする

■ 郵便番号検索から作成する
１．formから送信されるデータはGET方式であることから、$_GETを使ってデータの取得をする
　　この時「isset」を忘れないように
２．入力データのチェックを作成する
　　正規表現も必要
３．エラーが無いことを条件に該当データのみを取得する
４．取得が終わればトータル件数をカウントして専用の変数に入れておく
５．HTMLの表示部を作成する
　　エラーメッセージの表示
　　トータル件数の表示
　　該当データの表示
６．入力データをinput要素（テキストボックス）に残しておく
　
　
■ 地名検索を追加する
１．この時、郵便番号検索と、地名検索のどちらの処理かを判断するために、
　　form要素内に「<input type="hidden"．．>」項目を用意す���
　　「<input type="hidden"．．>」項目をまず取得し、どちらのformから送信されたかを確認し、郵便番号検索と地名検索のどちらを行うのか、if文で切り分ける。
２．formから送信されるデータはGET方式であることから、$_GETを使ってデータの取得をする
　　この時「isset」を忘れないように
３．地名検索用の入力データのチェックを作成する
４．エラーが無いことを条件に該当データのみを取得する
　　指定条件は、都道府県と市区町村が一致するデータのみ
５．取得が終わればトータル件数をカウントして専用の変数に入れておく
６．HTMLの表示部を作成する
　　エラーメッセージの表示
　　ト���タル件数の表示
　　該当データの表示
７．入力データをinput要素（テキストボックス）やselect要素（セレクトボックス）に残しておく
ここまでで全件対象の検索処理ができる
　
　
次に1ページに10件表示を作る
８．SQL文に「LIMIT」を追加して10件表示に変える
９．教科書を参考に「前のページ」、「次のページ」のリンクを作成する
　　リンクにページ数の指定を追加する
　　この時、現在のページ数（何ページ目か）に合わせてリンク内容を変更す��
１０．a要素��リン��から飛んでくるページ数の取得を追加する
　　ページ数に合わせて、データの取得内容を変える（「LIMIT」で使用する数値を変更する）
１１．このままではトータル件数が判らないので，トータル件数を取得するSQL処理を追加する
　　SQLに「COUNT」を使うとトータル件数を取得することができる
　　このトータル件数から最大ページ数が何ページか、計算により算出しておく
　　（切り上げを使うと簡単に算出できる）
１２．「前のページ」、「次のページ」のリンクの表示日表示機能を追加する
　　「前のページ」は2ページ目以降に表示する（1ページより大きい、とした方がきれい）
　　「次のページ」は最大ページには表示させない（最大ページより小さい、した方がきれい）
　
　
あると便利な機能（プラスアルファ）
・市区町村は完全一致ではなく、部分一致でも検索できるようにするとより便利
　都道府県は完全一致、市区町村は部分一致で行う
・また入力文字が市区町村だけでなく、町域の文字に一致するデータが表示できるようにすると丁目などの検索もできる
　入力項目は1つのま��だけど、市区町村、町域のどちらかに該当すれば表示できる機能
・ひらがなやカタカナ、半角カタカナ、どれで入力してもヒットする機能
　入力文字を半角に変換し、別の変数に入れ、その項目も検索条件に追加する



/// 18章～19章までの課題　作成の為の手順書 ///
18章から19章までで作成するSQL文は「kadai.sql」と言うようなファイルを作成し、
　それぞれのSQL文をすべて残しておきましょう。



/// 20-6 課題　作成の為の手順書 ///
20-6 課題は次のような手順で作ります。
１．point_gift_idを取得する
２．取得したpoint_gift_idを使って商品名、商品ポイントをDBから取得します。
３．その後、トランザクションをスタートする
４．point_history_tableに追加する
５．point_customer_tableの保有ポイントを減算する
６．エラーが発生したかどうかを確認し
　・エラーが無ければ
　　mysqli_commitを実行する
　　$messageに成功メッセージをセットする
　・エラーがあれば
　　mysqli_rollbackを実行する





/// 22-10 課題(中級)　作成の為の手順書 ///
BBSの関数化　作成の為の要点
１．「22-8ユーザー定義関数の使用例」のサンプルをベースに作成します。
２．「22-9 課題2」にあるfunction、「get_request_method()」と
　　「get_post_data($key)」の表示を追加しておきます。
３．これらのfunctionを使い、DBへのINSERTは「get_goods_table_list($link)」を
　　参考に作ります。
　　※作り方が解らない時は、ここだけfunction化を省略します。



/// 23-7 課題　作成の為の手順書 ///
BBSのMVC化　作成の為の要点
１．「22-10 課題(中級)」のHTMLを分離し、viewを作成します。
２．const.phpは「23-1 MVCモデルとは」とほぼ同じです。
３．bbs_function.phpは「23-5 MVCモデルの使用例」で作成した
　　「function.php」をベースに足りないところを追加します。
４．bbs_mvc.phpに残ったfuntion化できて無い処を他のfunctionを参考に
　　新しく作ります。



/// 23-8課題(中級)　作成の為の手順書 ///
自動販売機のMVC化　作成の為の要点
　　23-7 課題を参考に作成します。





